def compute_pairwise_loss(tgt_img, ref_img, tgt_depth, ref_depth, pose, intrinsic, with_ssim, with_mask, with_auto_mask, padding_mode,n_iter):

    ref_img_warped, valid_mask, projected_depth, computed_depth = inverse_warp2(ref_img, tgt_depth, ref_depth, pose, intrinsic, padding_mode)

    diff_img = (tgt_img - ref_img_warped).abs().clamp(0, 1)

    diff_depth = ((computed_depth - projected_depth).abs() / (computed_depth + projected_depth)).clamp(0, 1)

    if with_auto_mask == True:
        auto_mask = (diff_img.mean(dim=1, keepdim=True) < (tgt_img - ref_img).abs().mean(dim=1, keepdim=True)).float() * valid_mask
        valid_mask = auto_mask
       #######cyp
       
        image_mask=auto_mask.clone().detach()
        image_mask=image_mask.cpu()
        image_mask=image_mask.squeeze().numpy()
       
        I=Image.fromarray(image_mask,mode='L')
        I.save("./mask/"+"{}_mask.png".format(n_iter))
   

    if with_ssim == True:
        ssim_map = compute_ssim_loss(tgt_img, ref_img_warped)
        diff_img = (0.15 * diff_img + 0.85 * ssim_map)

    if with_mask == True:
        weight_mask = (1 - diff_depth)
        diff_img = diff_img * weight_mask
       #######cyp
        #Image.fromarray(weight_mask.mul(255).byte().cpu().numpy())

    # compute all loss
    reconstruction_loss = mean_on_mask(diff_img, valid_mask,n_iter)
    geometry_consistency_loss = mean_on_mask(diff_depth, valid_mask,n_iter)

    return reconstruction_loss, geometry_consistency_loss
